;Estimation header -> Excel

defines
;needed by JoPPS.QIF
  NO_COLORS=0

include JoPPS.QIF
include Cost.QIF
include Charge.QIF


defines
  DB_COST_ID         =CFLABEL
  DB_RES_COST        =CFCOST
  DB_RES_DESC        =CFDESC
  DB_RES_PRICE       =CFPRICE
  DB_RES_TIME        =CFTIME
  DB_RES_QUOTA       =CFQUOTA
  DB_RES_RATIO       =CFRATIO
  DB_RES_LOSS        =CFLOSS
  DB_RES_DISCOUNT    =CFDISCOUNT
  DB_RES_RATION      =CFRATION
  DB_RES_FACTOR      =CFFACTOR
  DB_RES_CHARGE      =CFCHARGE
  DB_RES_PROFIT      =CFPROFIT
  DB_RES_REFUND      =CFREFUND
  
  C_OPERATIONS       =-1

  C_FIXED_LOSS       =0
  C_ABSOLUTE_LOSS    =1
  C_REAL_LOSS        =2

  M_COST_PRICE      = (%DB_COST_PRICE%*%DB_COST_RATIO%)
  M_COST_TIME       = (%DB_COST_TIME%*%DB_COST_CURRENCY%)

  ESTIMATION_TEMPLATE=baojia2018_customized_price
  ALLOW_COST_RATES=0

fields
  DSP_COST_ID      ="@%DB_COST_ID%"            DISPLAY AS LEFT(90)
  DSP_RES_COST     = @%DB_RES_COST%            DISPLAY AS %FD_PRICE%
  DSP_RES_DESC     = @%DB_RES_DESC%            DISPLAY AS %FD_DESC%
  DSP_RES_PRICE    = @%DB_RES_PRICE%           DISPLAY AS %FD_TOTPRICE%
  DSP_RES_TIME     = @%DB_RES_TIME%            DISPLAY AS %FD_TOTTIME%
  DSP_RES_LOSS     = @%DB_RES_LOSS%            DISPLAY AS %FD_PROCENT100_2%
  DSP_RES_DISCOUNT = @%DB_RES_DISCOUNT%        DISPLAY AS %FD_PROCENT100_2%
  DSP_RES_RATION   = @%DB_RES_RATION%          DISPLAY AS %FD_COEF%
  DSP_RES_FACTOR   = @%DB_RES_FACTOR%          DISPLAY AS %FD_COEF%
  DSP_RES_CHARGE   = @%DB_RES_CHARGE%          DISPLAY AS %FD_PROCENT100_2%
  DSP_RES_PROFIT   = @%DB_RES_PROFIT%          DISPLAY AS %FD_PROCENT100_2%
  DSP_RES_REFUND   = @%DB_RES_REFUND%          DISPLAY AS %FD_PROCENT100_2%



;retrieve blocks & costs with articles in (0,16),(17,20), 29 and 42, EOSS2018 changed to (0,80),(85,90),29 and 42
report
  select   %DB_COST_ARTICLE%,
           %DB_COST_LOSSTYPE%,
           %DB_COST_RATION%,
           %DB_COST_FACTOR%,
           %DB_COST_RATIO%,
           min(%DB_COST_DESC%) as %DB_RES_DESC%,
           sum(%M_COST_PRICE%)/sum(%M_COST_TIME%) as %DB_RES_COST%,
           avg(%DB_COST_LOSS%) as %DB_RES_LOSS%,
           avg(%DB_COST_DISCOUNT%) as %DB_RES_DISCOUNT%,
           avg(%DB_COST_CHARGE%) as %DB_RES_CHARGE%,
           avg(%DB_COST_PROFIT%) as %DB_RES_PROFIT%,
           avg(%DB_COST_REFUND%) as %DB_RES_REFUND%,
	   min(%DB_COST_BLOCK%) as %DB_COST_BLOCK%
  from     %TBL_COST%
  where    %DB_COST_ARTICLE% != %C_OPERATIONS%
  and      %DB_COST_ARTICLE% not in (80,85,205) 
  and      (%DB_COST_ARTICLE% < 90 or %DB_COST_ARTICLE%=29 or %DB_COST_ARTICLE%=42)
  and      ((%DB_COST_PRICE% <> 0) or (%DB_COST_TIME% <> 0))
  group by %DB_COST_ARTICLE%, %DB_COST_LOSSTYPE%, %DB_COST_RATION%, %DB_COST_FACTOR%, %DB_COST_RATIO%
  having   count(*) > 0

using %REPORTNAME%_B_PROJECT_0.%REPORTTYPE%%IF{%REPORTTYPE%=J,,%LANGUAGE%}

next


;retrieve blocks & costs with article 16 17, EOSS2018 changed to 80,85
report
  select   %DB_COST_ARTICLE%,
           %DB_COST_LOSSTYPE%,
           %DB_COST_RATION%,
           %DB_COST_FACTOR%,
           %DB_COST_RATIO%,
           min(%DB_COST_DESC%) as %DB_RES_DESC%,
           sum(%M_COST_PRICE%)/sum(%M_COST_TIME%) as %DB_RES_COST%,
           avg(%DB_COST_LOSS%) as %DB_RES_LOSS%,
           avg(%DB_COST_DISCOUNT%) as %DB_RES_DISCOUNT%,
           avg(%DB_COST_CHARGE%) as %DB_RES_CHARGE%,
           avg(%DB_COST_PROFIT%) as %DB_RES_PROFIT%,
           avg(%DB_COST_REFUND%) as %DB_RES_REFUND%
  from     %TBL_COST%
  where    %DB_COST_ARTICLE% != %C_OPERATIONS%
  and      %DB_COST_ARTICLE%<>42  and %DB_COST_ARTICLE%<>205
  and      (%DB_COST_ARTICLE%>=90 or %DB_COST_ARTICLE%=80 or %DB_COST_ARTICLE%=85)
  and      ((%DB_COST_PRICE% <> 0) or (%DB_COST_TIME% <> 0))
  group by %DB_COST_ARTICLE%, %DB_COST_LOSSTYPE%, %DB_COST_RATION%, %DB_COST_FACTOR%, %DB_COST_RATIO%
  having   count(*) > 0

using %REPORTNAME%_B_PROJECT_0_1.%REPORTTYPE%%IF{%REPORTTYPE%=J,,%LANGUAGE%}

next


;retrieve prices project level
report
  select   %DB_COST_ARTICLE%,
           %DB_COST_LOSSTYPE%,
		   %DB_COST_RATION%,
           %DB_COST_FACTOR%,
           %DB_COST_RATIO%,
           sum(%DB_COST_PRICE%) as %DB_RES_PRICE%,
           min(trim(%DB_COST_PROJECT%)) as %DB_COST_ID%
  from     %TBL_COST%
  where    %DB_COST_PROJECT%  = "%PROJECT_TEXT%"
  and      %DB_COST_ASSEMBLY% = ""
  and      %DB_COST_FRAME%    = ""
  and      %DB_COST_ARTICLE% != %C_OPERATIONS%
  and      ((%DB_COST_PRICE% <> 0) or (%DB_COST_TIME% <> 0))
  group by %DB_COST_ARTICLE%, %DB_COST_LOSSTYPE%, %DB_COST_RATION%, %DB_COST_FACTOR%, %DB_COST_RATIO%
  having count(*)>0

using %REPORTNAME%_B_PROJECT_1.%REPORTTYPE%%IF{%REPORTTYPE%=J,,%LANGUAGE%}


next
report
    select  sum(ce.%DB_CHARGE_QUANTITY%) as %DB_CHARGE_QUANTITY%,
            sum(ce.%DB_CHARGE_PRICE%) as %DB_CHARGE_PRICE%,
            ce.%DB_CHARGE_ARTICLE%,
            ct.%DB_COST_LOSSTYPE%
    from    %TBL_CHARGE% ce, %TBL_COST% ct
    where   ce.%DB_CHARGE_PROJECT%="%PROJECT_TEXT%"
    and     ce.%DB_CHARGE_PROJECT%=%DB_COST_PROJECT%
    and     ce.%DB_CHARGE_ARTICLE%=ct.%DB_COST_ARTICLE%
    group by ce.%DB_CHARGE_ARTICLE%,ct.%DB_COST_LOSSTYPE%
    having count(*)>0
    
using %REPORTNAME%_B_PROJECT_C.%REPORTTYPE%%IF{%REPORTTYPE%=J,,%LANGUAGE%}
